/*
  Used in: calcite-color-picker,calcite-fab,calcite-inline-editable,calcite-split-button
  Depends on: calcite-loader,calcite-icon
*/

:host {
  @apply inline-block w-auto align-middle;
}

// fab variants
:host([round]) {
  border-radius: 50px;
  & a,
  & button {
    border-radius: 50px;
  }
}

// focus styles
:host button,
:host a {
  @apply focus-base;
  &:focus {
    @apply focus-outset;
  }
}
// button base
:host button,
:host a {
  @apply relative
    flex
    items-center
    justify-center
    no-underline
    w-full
    h-full
    rounded-none
    border-none
    select-none
    font-inherit
    appearance-none
    cursor-pointer
    text-center
    box-border;
  padding: 0.1875rem 1rem;
  // include transition from focus
  transition: background-color 0.15s ease-in-out, border 0.15s ease-in-out, box-shadow 0.15s ease-in-out,
    outline-offset 100ms ease-in-out, outline-color 100ms ease-in-out;
  &:hover {
    @apply no-underline;
  }
}

.content {
  @apply flex;
}

:host([scale="s"]) .content {
  @apply ml-2 mr-2;
}
:host([scale="m"]) .content {
  @apply ml-3 mr-3;
}
:host([scale="l"]) .content {
  @apply ml-4 mr-4;
}

:host(:not([icon-start])) {
  .content {
    margin-left: unset;
  }
}
:host(:not([icon-end])) {
  .content {
    margin-right: unset;
  }
}
:host([icon-start]:not([icon-end])) {
  .calcite--rtl .content {
    margin-left: unset;
    margin-right: calc(theme("spacing.6") / 3);
  }
}
:host([icon-end]:not([icon-start])) {
  .calcite--rtl .content {
    margin-right: unset;
    margin-left: calc(theme("spacing.6") / 3);
  }
}

// button scale (TEMP: RETAINED MIXINS FOR INPUT, INLINE-EDITABLE)
@mixin btn-scale($font-size, $line-height, $padding-y, $padding-x) {
  padding: $padding-y $padding-x;
  font-size: $font-size;
  line-height: $line-height;
}
@mixin btn-scale-notext($font-size, $size) {
  height: $size;
  width: $size;
  font-size: $font-size;
}
@mixin btn-scale-notext-two-icons($font-size, $size) {
  height: $size;
  width: $size * 1.5;
  font-size: $font-size;
}

// button width
:host([width="auto"]) {
  @apply w-auto;
}

:host([width="half"]) {
  @apply w-3/6;
}

:host([width="full"]) {
  @apply w-full;
}

// alignment
:host([alignment="center"]:not([width="auto"])) {
  a,
  button {
    @apply justify-center;
  }
}
:host([alignment="start"]:not([width="auto"])) {
  a,
  button {
    @apply justify-start;
  }
}
:host([alignment="end"]:not([width="auto"])) {
  a,
  button {
    @apply justify-end;
  }
}
:host([alignment*="space-between"]:not([width="auto"])) {
  a,
  button {
    @apply justify-between;
  }
}
:host([alignment="icon-start-space-between"]:not([width="auto"])) {
  .icon--start {
    @apply mr-auto;
  }
  a,
  button {
    text-align: unset;
  }
}
:host([alignment="icon-end-space-between"]:not([width="auto"])) {
  .icon--end {
    @apply ml-auto;
  }
  a,
  button {
    text-align: unset;
  }
}
:host([alignment="icon-start-space-between"]:not([width="auto"])) {
  .calcite--rtl .icon--start {
    margin-right: unset;
    @apply ml-auto;
  }
}
:host([alignment="icon-end-space-between"]:not([width="auto"])) {
  .calcite--rtl .icon--end {
    margin-left: unset;
    @apply mr-auto;
  }
}

// only two icons
// LTR
:host([alignment="center"]) {
  &:host([scale="s"]) {
    a:not(.content--slotted),
    button:not(.content--slotted) {
      .icon--start + .icon--end {
        margin-left: 8px;
      }
    }
  }
  &:host([scale="m"]) {
    a:not(.content--slotted),
    button:not(.content--slotted) {
      .icon--start + .icon--end {
        margin-left: 12px;
      }
    }
  }
  &:host([scale="l"]) {
    a:not(.content--slotted),
    button:not(.content--slotted) {
      .icon--start + .icon--end {
        margin-left: 16px;
      }
    }
  }
}
// RTL
:host([alignment="center"]) {
  &:host([scale="s"]) {
    a:not(.content--slotted),
    button.calcite--rtl:not(.content--slotted) {
      .icon--start + .icon--end {
        margin-left: unset;
        margin-right: 8px;
      }
    }
  }
  &:host([scale="m"]) {
    a:not(.content--slotted),
    button.calcite--rtl:not(.content--slotted) {
      .icon--start + .icon--end {
        margin-left: unset;
        margin-right: 12px;
      }
    }
  }
  &:host([scale="l"]) {
    a:not(.content--slotted),
    button.calcite--rtl:not(.content--slotted) {
      .icon--start + .icon--end {
        margin-left: unset;
        margin-right: 16px;
      }
    }
  }
}

.icon {
  @apply inline-flex
    relative
    m-0
    transition-default;
  line-height: inherit;
}

// disabled styles
:host([disabled]) {
  @apply pointer-events-none;
  button,
  a {
    @apply pointer-events-none opacity-disabled;
  }
}

.calcite-button--loader {
  @apply flex
    absolute
    top-0
    left-0
    right-0
    bottom-0
    items-center
    justify-center;
  calcite-loader {
    @apply m-0;
  }
}

:host([loading]) {
  calcite-loader {
    --calcite-loader-size-inline: theme("height.3");
  }
  button,
  a {
    color: transparent !important;
    @apply pointer-events-none;
    .calcite-button--icon {
      @apply opacity-0;
    }
  }
}

// button styles
// solid
@mixin btn-solid($bg-color, $bg-color-hover, $bg-color-press, $color) {
  color: $color;
  background-color: $bg-color;
  @apply border border-solid border-color-transparent;
  &:hover,
  &:focus {
    background-color: $bg-color-hover;
  }
  &:active {
    background-color: $bg-color;
  }
  & .calcite-button--icon {
    fill: $color;
  }
  & calcite-loader {
    color: $color;
  }
}

:host([appearance="solid"][color="blue"]) {
  button,
  a {
    @include btn-solid(
      var(--calcite-ui-brand),
      var(--calcite-ui-brand-hover),
      var(--calcite-ui-brand-press),
      var(--calcite-ui-foreground-1)
    );
  }
}
:host([appearance="solid"][color="red"]) {
  button,
  a {
    @include btn-solid(
      var(--calcite-ui-danger),
      var(--calcite-ui-danger-hover),
      var(--calcite-ui-danger-press),
      var(--calcite-ui-foreground-1)
    );
  }
}
:host([appearance="solid"][color="neutral"]) {
  button,
  a {
    @include btn-solid(
      var(--calcite-ui-foreground-3),
      var(--calcite-ui-foreground-2),
      var(--calcite-ui-border-2),
      var(--calcite-ui-text-1)
    );
  }
}
:host([appearance="solid"][color="inverse"]) {
  button,
  a {
    @include btn-solid(
      var(--calcite-ui-inverse),
      var(--calcite-ui-inverse-hover),
      var(--calcite-ui-inverse-press),
      $blk-000
    );
  }
}

// outline and clear
@mixin btn-outline-clear($bg-color, $border-color, $border-color-hover, $border-color-press, $color, $color-press) {
  color: $color;
  background-color: $bg-color;
  border: 1px solid $border-color;
  box-shadow: inset 0 0 0 1px transparent;
  &:hover {
    border-color: $border-color;
    box-shadow: inset 0 0 0 1px $border-color;
  }
  &:active,
  &:focus {
    color: $color-press;
    border-color: $border-color-press;
    box-shadow: inset 0 0 0 2px $border-color-press;
    & .calcite-button--icon {
      fill: $color-press;
    }
  }
  & .calcite-button--icon {
    fill: $color;
  }
  & calcite-loader {
    color: $color;
  }
}

:host([appearance="outline"][color="blue"]) {
  button,
  a {
    @include btn-outline-clear(
      var(--calcite-ui-foreground-1),
      var(--calcite-ui-brand),
      var(--calcite-ui-brand-hover),
      var(--calcite-ui-brand-press),
      var(--calcite-ui-brand),
      var(--calcite-ui-brand-press)
    );
  }
}
:host([appearance="outline"][color="red"]) {
  button,
  a {
    @include btn-outline-clear(
      var(--calcite-ui-foreground-1),
      var(--calcite-ui-danger),
      var(--calcite-ui-danger-hover),
      var(--calcite-ui-danger-press),
      var(--calcite-ui-danger),
      var(--calcite-ui-danger-press)
    );
  }
}
:host([appearance="outline"][color="neutral"]) {
  button,
  a {
    @include btn-outline-clear(
      var(--calcite-ui-foreground-1),
      var(--calcite-ui-foreground-3),
      var(--calcite-ui-foreground-2),
      var(--calcite-ui-border-2),
      var(--calcite-ui-text-1),
      var(--calcite-ui-text-1)
    );
  }
}
:host([appearance="outline"][color="inverse"]) {
  button,
  a {
    @include btn-outline-clear(
      var(--calcite-ui-foreground-1),
      var(--calcite-ui-inverse),
      var(--calcite-ui-inverse-press),
      var(--calcite-ui-inverse-hover),
      var(--calcite-ui-text-1),
      var(--calcite-ui-text-1)
    );
  }
}
:host([appearance="clear"][color="blue"]) {
  button,
  a {
    @include btn-outline-clear(
      transparent,
      var(--calcite-ui-brand),
      var(--calcite-ui-brand-hover),
      var(--calcite-ui-brand-press),
      var(--calcite-ui-brand),
      var(--calcite-ui-brand-press)
    );
  }
}
:host([appearance="clear"][color="red"]) {
  button,
  a {
    @include btn-outline-clear(
      transparent,
      var(--calcite-ui-danger),
      var(--calcite-ui-danger-hover),
      var(--calcite-ui-danger-press),
      var(--calcite-ui-danger),
      var(--calcite-ui-danger-press)
    );
  }
}
:host([appearance="clear"][color="neutral"]) {
  button,
  a {
    @include btn-outline-clear(
      transparent,
      var(--calcite-ui-foreground-3),
      var(--calcite-ui-foreground-2),
      var(--calcite-ui-border-2),
      var(--calcite-ui-text-1),
      var(--calcite-ui-text-1)
    );
  }
}
:host([appearance="clear"][color="inverse"]) {
  button,
  a {
    @include btn-outline-clear(
      transparent,
      var(--calcite-ui-inverse),
      var(--calcite-ui-inverse-press),
      var(--calcite-ui-inverse-hover),
      var(--calcite-ui-text-1),
      var(--calcite-ui-text-1)
    );
  }
}

:host([appearance="outline"][split-child="primary"]) button,
:host([appearance="clear"][split-child="primary"]) button {
  border-right: 0;
}

:host([appearance="outline"][split-child="secondary"]) button,
:host([appearance="clear"][split-child="secondary"]) button {
  .calcite--rtl {
    border-right: 0;
  }
}

:host([appearance="outline"][split-child="secondary"]) button,
:host([appearance="clear"][split-child="secondary"]) button {
  border-left: 0;
}

:host([appearance="outline"][split-child="primary"]) button,
:host([appearance="clear"][split-child="primary"]) button {
  .calcite--rtl {
    border-left: 0;
  }
}

// transparent
@mixin btn-transparent($color) {
  color: $color;
  background-color: transparent;
  &:hover,
  &:focus {
    background-color: var(--calcite-button-transparent-hover);
  }
  &:active {
    background-color: var(--calcite-button-transparent-press);
  }
  & calcite-loader {
    color: $color;
  }
}

:host([appearance="transparent"][color="blue"]) {
  button,
  a {
    @include btn-transparent(var(--calcite-ui-text-link));
  }
}

:host([appearance="transparent"][color="red"]) {
  button,
  a {
    @include btn-transparent(var(--calcite-ui-danger-press));
  }
}
:host([appearance="transparent"][color="neutral"]) {
  button,
  a {
    @include btn-transparent(var(--calcite-ui-text-1));
  }
}
:host([appearance="transparent"][color="inverse"]) {
  button,
  a {
    @include btn-transparent(var(--calcite-ui-foreground-1));
  }
}

// generate button scales (RETAIN FOR INPUT,INLINE-EDITABLE BUTTONS)
$btnScales: "s" 12px 1.33 7px 12px, "m" 14px 1.15 13px 20px, "l" 18px 1.2 15px 24px;
@each $btnScale in $btnScales {
  $name: nth($btnScale, 1);
  $font-size: nth($btnScale, 2);
  $line-height: nth($btnScale, 3);
  $padding-y: nth($btnScale, 4);
  $padding-x: nth($btnScale, 5);

  :host([scale="#{$name}"][slot="action"]:not([appearance="transparent"])) button.content--slotted,
  :host([scale="#{$name}"].sc-calcite-inline-editable:not([appearance="transparent"])) button,
  :host([scale="#{$name}"][slot="action"]:not([appearance="transparent"])) a.content--slotted {
    @include btn-scale($font-size, $line-height, $padding-y, $padding-x);
  }
  // accomodate for transparent buttons not having borders
  :host([scale="#{$name}"][slot="action"][appearance="transparent"]) button.content--slotted,
  :host([scale="#{$name}"].sc-calcite-inline-editable[appearance="transparent"]) button,
  :host([scale="#{$name}"][slot="action"][appearance="transparent"]) a.content--slotted {
    $compensated-padding-y: $padding-y + 1px;
    @include btn-scale($font-size, $line-height, $compensated-padding-y, $padding-x);
  }
}
// generate fab scales
$btnScales2: "s" 12px 32px, "m" 14px 44px, "l" 18px 56px;
@each $btnScale in $btnScales2 {
  $name: nth($btnScale, 1);
  $font-size: nth($btnScale, 2);
  $size: nth($btnScale, 3);

  :host([scale="#{$name}"][slot="action"]) button:not(.content--slotted),
  :host([scale="#{$name}"].sc-calcite-inline-editable) button:not(.content--slotted),
  :host([scale="#{$name}"][slot="action"]) a:not(.content--slotted) {
    @include btn-scale-notext($font-size, $size);
  }
}
// generate fab scales
$btnScales3: "s" 12px 32px, "m" 14px 44px, "l" 18px 56px;
@each $btnScale in $btnScales3 {
  $name: nth($btnScale, 1);
  $font-size: nth($btnScale, 2);
  $size: nth($btnScale, 3);

  :host([scale="#{$name}"][slot="action"][icon-start][icon-end]) button:not(.content--slotted),
  :host([scale="#{$name}"][slot="action"][icon-start][icon-end]) a:not(.content--slotted) {
    @include btn-scale-notext-two-icons($font-size, $size);
  }
}

/* NEW button scales (scenario: text only) */
/* SMALL */
:host([scale="s"]) button.content--slotted,
:host([scale="s"]) a.content--slotted {
  @apply text--2h;
  padding-left: 7px;
  padding-right: 7px;
}
:host([scale="s"]:not([appearance="transparent"])) button.content--slotted,
:host([scale="s"]:not([appearance="transparent"])) a.content--slotted {
  padding-top: 3px;
  padding-bottom: 3px;
}
// accommodate for transparent buttons not having borders
:host([scale="s"][appearance="transparent"]) button.content--slotted,
:host([scale="s"][appearance="transparent"]) a.content--slotted {
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 8px;
  padding-right: 8px;
}
/* MEDIUM */
:host([scale="m"]) button.content--slotted,
:host([scale="m"]) a.content--slotted {
  @apply text--1h;
  padding-left: 11px;
  padding-right: 11px;
}
:host([scale="m"]:not([appearance="transparent"])) button.content--slotted,
:host([scale="m"]:not([appearance="transparent"])) a.content--slotted {
  padding-top: 7px;
  padding-bottom: 7px;
}
// accommodate for transparent buttons not having borders
:host([scale="m"][appearance="transparent"]) button.content--slotted,
:host([scale="m"][appearance="transparent"]) a.content--slotted {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 12px;
  padding-right: 12px;
}
/* LARGE */
:host([scale="l"]) button.content--slotted,
:host([scale="l"]) a.content--slotted {
  @apply text-0h;
  padding-left: 15px;
  padding-right: 15px;
}
:host([scale="l"]:not([appearance="transparent"])) button.content--slotted,
:host([scale="l"]:not([appearance="transparent"])) a.content--slotted {
  padding-top: 11px;
  padding-bottom: 11px;
}
// accommodate for transparent buttons not having borders
:host([scale="l"][appearance="transparent"]) button.content--slotted,
:host([scale="l"][appearance="transparent"]) a.content--slotted {
  padding-top: 12px;
  padding-bottom: 12px;
  padding-left: 16px;
  padding-right: 16px;
}

/* fab scales (scenario: 1 icon, ie., should be square) */
/* SMALL */
:host([scale="s"]) button:not(.content--slotted),
:host([scale="s"]) a:not(.content--slotted) {
  @apply text-0h;
  padding-top: 3px;
  padding-bottom: 3px;
  padding-left: 2px;
  padding-right: 2px;
  width: 24px;
}
// accommodate for transparent buttons not having borders
:host([scale="s"][appearance="transparent"]) button:not(.content--slotted),
:host([scale="s"][appearance="transparent"]) a:not(.content--slotted) {
  padding-top: 4px;
  padding-bottom: 4px;
}
/* MEDIUM */
:host([scale="m"]) button:not(.content--slotted),
:host([scale="m"]) a:not(.content--slotted) {
  @apply text-0h;
  padding-top: 7px;
  padding-bottom: 7px;
  padding-left: 2px;
  padding-right: 2px;
  width: 32px;
}
// accommodate for transparent buttons not having borders
:host([scale="m"][appearance="transparent"]) button:not(.content--slotted),
:host([scale="m"][appearance="transparent"]) a:not(.content--slotted) {
  padding-top: 8px;
  padding-bottom: 8px;
}
/* LARGE */
:host([scale="l"]) button:not(.content--slotted),
:host([scale="l"]) a:not(.content--slotted) {
  @apply text-0h;
  padding-top: 9px;
  padding-bottom: 9px;
  padding-left: 2px;
  padding-right: 2px;
  width: 44px;
}
// accommodate for transparent buttons not having borders
:host([scale="l"][appearance="transparent"]) button:not(.content--slotted),
:host([scale="l"][appearance="transparent"]) a:not(.content--slotted) {
  padding-top: 10px;
  padding-bottom: 10px;
}

/* fab scales (scenario: 2 icons, ie., should not be square) */
/* SMALL */
:host([scale="s"][icon-start][icon-end]) button:not(.content--slotted),
:host([scale="s"][icon-start][icon-end]) a:not(.content--slotted) {
  @apply text-0h;
  padding-left: 23px;
  padding-right: 23px;
  height: 24px;
  width: 24px * 1.5;
}
// accommodate for transparent buttons not having borders
:host([scale="s"][icon-start][icon-end][appearance="transparent"]) button:not(.content--slotted),
:host([scale="s"][icon-start][icon-end][appearance="transparent"]) a:not(.content--slotted) {
  padding-left: 24px;
  padding-right: 24px;
}
/* MEDIUM */
:host([scale="m"][icon-start][icon-end]) button:not(.content--slotted),
:host([scale="m"][icon-start][icon-end]) a:not(.content--slotted) {
  @apply text-0h;
  padding-left: 32px;
  padding-right: 32px;
  height: 32px;
  width: 32px * 1.5;
}
// accommodate for transparent buttons not having borders
:host([scale="m"][icon-start][icon-end][appearance="transparent"]) button:not(.content--slotted),
:host([scale="m"][icon-start][icon-end][appearance="transparent"]) a:not(.content--slotted) {
  padding-left: 33px;
  padding-right: 33px;
}
/* LARGE */
:host([scale="l"][icon-start][icon-end]) button:not(.content--slotted),
:host([scale="l"][icon-start][icon-end]) a:not(.content--slotted) {
  @apply text-0h;
  padding-left: 43px;
  padding-right: 43px;
  height: 44px;
  width: 44px * 1.5;
}
// accommodate for transparent buttons not having borders
:host([scale="l"][icon-start][icon-end][appearance="transparent"]) button:not(.content--slotted),
:host([scale="l"][icon-start][icon-end][appearance="transparent"]) a:not(.content--slotted) {
  padding-left: 44px;
  padding-right: 44px;
}
